// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/proto/telemetry/telemetry.proto

package telemetry

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Labels               map[string]string    `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Measurements         map[string]int64     `protobuf:"bytes,4,rep,name=measurements,proto3" json:"measurements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_3989a5958449f7d9, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Event) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Event) GetMeasurements() map[string]int64 {
	if m != nil {
		return m.Measurements
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "telemetry.Event")
	proto.RegisterMapType((map[string]string)(nil), "telemetry.Event.LabelsEntry")
	proto.RegisterMapType((map[string]int64)(nil), "telemetry.Event.MeasurementsEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TelemetryClient is the client API for Telemetry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TelemetryClient interface {
	Record(ctx context.Context, opts ...grpc.CallOption) (Telemetry_RecordClient, error)
}

type telemetryClient struct {
	cc *grpc.ClientConn
}

func NewTelemetryClient(cc *grpc.ClientConn) TelemetryClient {
	return &telemetryClient{cc}
}

func (c *telemetryClient) Record(ctx context.Context, opts ...grpc.CallOption) (Telemetry_RecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Telemetry_serviceDesc.Streams[0], "/telemetry.Telemetry/Record", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryRecordClient{stream}
	return x, nil
}

type Telemetry_RecordClient interface {
	Send(*Event) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type telemetryRecordClient struct {
	grpc.ClientStream
}

func (x *telemetryRecordClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *telemetryRecordClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryServer is the server API for Telemetry service.
type TelemetryServer interface {
	Record(Telemetry_RecordServer) error
}

func RegisterTelemetryServer(s *grpc.Server, srv TelemetryServer) {
	s.RegisterService(&_Telemetry_serviceDesc, srv)
}

func _Telemetry_Record_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TelemetryServer).Record(&telemetryRecordServer{stream})
}

type Telemetry_RecordServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type telemetryRecordServer struct {
	grpc.ServerStream
}

func (x *telemetryRecordServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *telemetryRecordServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Telemetry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.Telemetry",
	HandlerType: (*TelemetryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Record",
			Handler:       _Telemetry_Record_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/telemetry/telemetry.proto",
}

func init() {
	proto.RegisterFile("pkg/proto/telemetry/telemetry.proto", fileDescriptor_3989a5958449f7d9)
}

var fileDescriptor_3989a5958449f7d9 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4f, 0x83, 0x40,
	0x10, 0x85, 0x05, 0x5a, 0x12, 0x06, 0x0f, 0x75, 0x63, 0x0c, 0x59, 0x4d, 0x24, 0x78, 0xe1, 0xb4,
	0x24, 0x68, 0x4c, 0xf5, 0xe2, 0xc1, 0xe0, 0x49, 0x2f, 0xa4, 0x7f, 0x00, 0x74, 0x24, 0xa6, 0x2c,
	0x10, 0x58, 0x9a, 0xf0, 0x2b, 0xfd, 0x4b, 0xa6, 0xbb, 0x50, 0xb0, 0x1c, 0x7a, 0x7b, 0xcc, 0xbc,
	0xf7, 0xb1, 0x6f, 0x17, 0xee, 0xaa, 0x6d, 0x16, 0x54, 0x75, 0x29, 0xca, 0x40, 0x60, 0x8e, 0x1c,
	0x45, 0xdd, 0x8d, 0x8a, 0xc9, 0x0d, 0xb1, 0x0e, 0x03, 0x7a, 0x9b, 0x95, 0x65, 0x96, 0xa3, 0x8a,
	0xa4, 0xed, 0x77, 0x20, 0x7e, 0x38, 0x36, 0x22, 0xe1, 0x95, 0xf2, 0xd2, 0xeb, 0x63, 0x03, 0xf2,
	0x4a, 0xf4, 0x20, 0xef, 0x57, 0x87, 0x65, 0xb4, 0xc3, 0x42, 0x10, 0x02, 0x8b, 0x22, 0xe1, 0xe8,
	0x68, 0xae, 0xe6, 0x5b, 0xb1, 0xd4, 0x64, 0x0d, 0xd6, 0x81, 0xe6, 0xe8, 0xae, 0xe6, 0xdb, 0x21,
	0x65, 0x0a, 0xc7, 0x06, 0x1c, 0xdb, 0x0c, 0x8e, 0x78, 0x34, 0x93, 0x07, 0x30, 0xf3, 0x24, 0xc5,
	0xbc, 0x71, 0x0c, 0xd7, 0xf0, 0xed, 0xf0, 0x86, 0x8d, 0x15, 0xe4, 0xff, 0xd8, 0xbb, 0x5c, 0x47,
	0x85, 0xa8, 0xbb, 0xb8, 0xf7, 0x92, 0x37, 0x38, 0xe7, 0x98, 0x34, 0x6d, 0x8d, 0x1c, 0x0b, 0xd1,
	0x38, 0x0b, 0x99, 0xf5, 0x66, 0xd9, 0x8f, 0x89, 0x49, 0x11, 0xfe, 0xe5, 0xe8, 0x13, 0xd8, 0x13,
	0x3c, 0x59, 0x81, 0xb1, 0xc5, 0xae, 0x6f, 0xb6, 0x97, 0xe4, 0x12, 0x96, 0xbb, 0x24, 0x6f, 0x51,
	0x96, 0xb2, 0x62, 0xf5, 0xf1, 0xac, 0xaf, 0x35, 0xfa, 0x02, 0x17, 0x33, 0xfa, 0x29, 0x80, 0x31,
	0x01, 0x84, 0xaf, 0x60, 0x6d, 0x86, 0xe3, 0x92, 0x47, 0x30, 0x63, 0xfc, 0x2c, 0xeb, 0x2f, 0xb2,
	0x3a, 0x2e, 0x41, 0xaf, 0x66, 0x37, 0x19, 0xed, 0x1f, 0xc6, 0x3b, 0xf3, 0xb5, 0xd4, 0x94, 0xb3,
	0xfb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73, 0xc6, 0x62, 0x61, 0x0d, 0x02, 0x00, 0x00,
}
